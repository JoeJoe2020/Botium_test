{
  "stats": {
    "suites": 1,
    "tests": 31,
    "passes": 24,
    "pending": 0,
    "failures": 7,
    "start": "2023-04-13T09:23:57.968Z",
    "end": "2023-04-13T09:24:08.738Z",
    "duration": 10770,
    "testsRegistered": 31,
    "passPercent": 77.41935483870968,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "68e8584d-b075-46c1-a968-586fcdbd918c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
          "title": "Botium Test-Suite",
          "fullFile": "",
          "file": "",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"before all\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 12,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "driver.Build()\n  .then((container) => {\n    suite.container = container\n    done()\n  })\n  .catch(done)",
              "err": {},
              "uuid": "7c58e6ef-0dc4-4a75-b77c-1dd08085fa69",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"before each\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Start().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "256f494e-b968-4bf9-b931-c16c2db0bd67",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"after all\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 2,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Clean().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "07fc1aca-5621-463d-927d-e9ef3240f596",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Botium Test-Suite\"",
              "fullTitle": "Botium Test-Suite \"after each\" hook in \"Botium Test-Suite\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "suite.container ? suite.container.Stop().then(() => done()).catch(done) : done()",
              "err": {},
              "uuid": "88f0bf83-7137-4d06-8568-19a10df3ca06",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "BOOK_A_ROOM.scenario1/GREETING-L1/BOOK-L1",
              "fullTitle": "Botium Test-Suite BOOK_A_ROOM.scenario1/GREETING-L1/BOOK-L1",
              "timedOut": false,
              "duration": 523,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Hello\\n#bot: You said: Hello\\n#me: what can i do for you?\\n#bot: You said: what can i do for you?\\n#me: Today is 4/13/2023\\n#bot: You said: Today is 4/13/2023\\n#me: I want to book a single room.\\n#bot: You said: I want to book a single room.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: BOOK_A_ROOM.scenario1/GREETING-L1/BOOK-L1/Line 08: assertion error - Line 08: Expected text(s) in response \"double\"\r\n########################################\r\nASSERTION FAILED in undefined - Expected: [\"double\"]  - Actual: {\"sender\":\"bot\",\"sourceData\":{\"request\":{\"messageText\":\"I want to book a single room.\",\"buttons\":null,\"media\":null},\"session\":{}},\"messageText\":\"You said: I want to book a single room.\",\"channel\":\"default\"}\r\nINPUT: I want to book a $type room.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: Hello\r\n#bot: You said: Hello\r\n#me: what can i do for you?\r\n#bot: You said: what can i do for you?\r\n#me: Today is 4/13/2023\r\n#bot: You said: Today is 4/13/2023\r\n#me: I want to book a single room.\r\n#bot: You said: I want to book a single room.",
                "estack": "Error: BOOK_A_ROOM.scenario1/GREETING-L1/BOOK-L1/Line 08: assertion error - Line 08: Expected text(s) in response \"double\"\r\n########################################\r\nASSERTION FAILED in undefined - Expected: [\"double\"]  - Actual: {\"sender\":\"bot\",\"sourceData\":{\"request\":{\"messageText\":\"I want to book a single room.\",\"buttons\":null,\"media\":null},\"session\":{}},\"messageText\":\"You said: I want to book a single room.\",\"channel\":\"default\"}\r\nINPUT: I want to book a $type room.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: Hello\r\n#bot: You said: Hello\r\n#me: what can i do for you?\r\n#bot: You said: what can i do for you?\r\n#me: Today is 4/13/2023\r\n#bot: You said: Today is 4/13/2023\r\n#me: I want to book a single room.\r\n#bot: You said: I want to book a single room.\n    at wrapBotiumError (/usr/local/lib/node_modules/botium-cli/src/run/index.js:76:12)\n    at finish (/usr/local/lib/node_modules/botium-cli/src/run/index.js:205:24)\n    at /usr/local/lib/node_modules/botium-cli/src/run/index.js:218:11",
                "diff": null
              },
              "uuid": "89103704-9eac-4b7d-bc7c-3f78ba6d9fff",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BOOK_A_ROOM.scenario1/GREETING-L2/BOOK-L1",
              "fullTitle": "Botium Test-Suite BOOK_A_ROOM.scenario1/GREETING-L2/BOOK-L1",
              "timedOut": false,
              "duration": 507,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Hi\\n#bot: You said: Hi\\n#me: what can i do for you?\\n#bot: You said: what can i do for you?\\n#me: Today is 4/13/2023\\n#bot: You said: Today is 4/13/2023\\n#me: I want to book a single room.\\n#bot: You said: I want to book a single room.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: BOOK_A_ROOM.scenario1/GREETING-L2/BOOK-L1/Line 08: assertion error - Line 08: Expected text(s) in response \"double\"\r\n########################################\r\nASSERTION FAILED in undefined - Expected: [\"double\"]  - Actual: {\"sender\":\"bot\",\"sourceData\":{\"request\":{\"messageText\":\"I want to book a single room.\",\"buttons\":null,\"media\":null},\"session\":{}},\"messageText\":\"You said: I want to book a single room.\",\"channel\":\"default\"}\r\nINPUT: I want to book a $type room.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: Hi\r\n#bot: You said: Hi\r\n#me: what can i do for you?\r\n#bot: You said: what can i do for you?\r\n#me: Today is 4/13/2023\r\n#bot: You said: Today is 4/13/2023\r\n#me: I want to book a single room.\r\n#bot: You said: I want to book a single room.",
                "estack": "Error: BOOK_A_ROOM.scenario1/GREETING-L2/BOOK-L1/Line 08: assertion error - Line 08: Expected text(s) in response \"double\"\r\n########################################\r\nASSERTION FAILED in undefined - Expected: [\"double\"]  - Actual: {\"sender\":\"bot\",\"sourceData\":{\"request\":{\"messageText\":\"I want to book a single room.\",\"buttons\":null,\"media\":null},\"session\":{}},\"messageText\":\"You said: I want to book a single room.\",\"channel\":\"default\"}\r\nINPUT: I want to book a $type room.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: Hi\r\n#bot: You said: Hi\r\n#me: what can i do for you?\r\n#bot: You said: what can i do for you?\r\n#me: Today is 4/13/2023\r\n#bot: You said: Today is 4/13/2023\r\n#me: I want to book a single room.\r\n#bot: You said: I want to book a single room.\n    at wrapBotiumError (/usr/local/lib/node_modules/botium-cli/src/run/index.js:76:12)\n    at finish (/usr/local/lib/node_modules/botium-cli/src/run/index.js:205:24)\n    at /usr/local/lib/node_modules/botium-cli/src/run/index.js:218:11",
                "diff": null
              },
              "uuid": "2c847b8f-1876-4a15-9c12-727c7e1876bd",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BOOK_A_ROOM.scenario1/GREETING-L3/BOOK-L1",
              "fullTitle": "Botium Test-Suite BOOK_A_ROOM.scenario1/GREETING-L3/BOOK-L1",
              "timedOut": false,
              "duration": 507,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Good morning\\n#bot: You said: Good morning\\n#me: what can i do for you?\\n#bot: You said: what can i do for you?\\n#me: Today is 4/13/2023\\n#bot: You said: Today is 4/13/2023\\n#me: I want to book a single room.\\n#bot: You said: I want to book a single room.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: BOOK_A_ROOM.scenario1/GREETING-L3/BOOK-L1/Line 08: assertion error - Line 08: Expected text(s) in response \"double\"\r\n########################################\r\nASSERTION FAILED in undefined - Expected: [\"double\"]  - Actual: {\"sender\":\"bot\",\"sourceData\":{\"request\":{\"messageText\":\"I want to book a single room.\",\"buttons\":null,\"media\":null},\"session\":{}},\"messageText\":\"You said: I want to book a single room.\",\"channel\":\"default\"}\r\nINPUT: I want to book a $type room.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: Good morning\r\n#bot: You said: Good morning\r\n#me: what can i do for you?\r\n#bot: You said: what can i do for you?\r\n#me: Today is 4/13/2023\r\n#bot: You said: Today is 4/13/2023\r\n#me: I want to book a single room.\r\n#bot: You said: I want to book a single room.",
                "estack": "Error: BOOK_A_ROOM.scenario1/GREETING-L3/BOOK-L1/Line 08: assertion error - Line 08: Expected text(s) in response \"double\"\r\n########################################\r\nASSERTION FAILED in undefined - Expected: [\"double\"]  - Actual: {\"sender\":\"bot\",\"sourceData\":{\"request\":{\"messageText\":\"I want to book a single room.\",\"buttons\":null,\"media\":null},\"session\":{}},\"messageText\":\"You said: I want to book a single room.\",\"channel\":\"default\"}\r\nINPUT: I want to book a $type room.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: Good morning\r\n#bot: You said: Good morning\r\n#me: what can i do for you?\r\n#bot: You said: what can i do for you?\r\n#me: Today is 4/13/2023\r\n#bot: You said: Today is 4/13/2023\r\n#me: I want to book a single room.\r\n#bot: You said: I want to book a single room.\n    at wrapBotiumError (/usr/local/lib/node_modules/botium-cli/src/run/index.js:76:12)\n    at finish (/usr/local/lib/node_modules/botium-cli/src/run/index.js:205:24)\n    at /usr/local/lib/node_modules/botium-cli/src/run/index.js:218:11",
                "diff": null
              },
              "uuid": "dbd5aa74-33e5-4fb6-bad9-2a69aafc0ce7",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BOOK_A_ROOM.scenario1/GREETING-L4/BOOK-L1",
              "fullTitle": "Botium Test-Suite BOOK_A_ROOM.scenario1/GREETING-L4/BOOK-L1",
              "timedOut": false,
              "duration": 508,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Good afternoon\\n#bot: You said: Good afternoon\\n#me: what can i do for you?\\n#bot: You said: what can i do for you?\\n#me: Today is 4/13/2023\\n#bot: You said: Today is 4/13/2023\\n#me: I want to book a single room.\\n#bot: You said: I want to book a single room.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: BOOK_A_ROOM.scenario1/GREETING-L4/BOOK-L1/Line 08: assertion error - Line 08: Expected text(s) in response \"double\"\r\n########################################\r\nASSERTION FAILED in undefined - Expected: [\"double\"]  - Actual: {\"sender\":\"bot\",\"sourceData\":{\"request\":{\"messageText\":\"I want to book a single room.\",\"buttons\":null,\"media\":null},\"session\":{}},\"messageText\":\"You said: I want to book a single room.\",\"channel\":\"default\"}\r\nINPUT: I want to book a $type room.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: Good afternoon\r\n#bot: You said: Good afternoon\r\n#me: what can i do for you?\r\n#bot: You said: what can i do for you?\r\n#me: Today is 4/13/2023\r\n#bot: You said: Today is 4/13/2023\r\n#me: I want to book a single room.\r\n#bot: You said: I want to book a single room.",
                "estack": "Error: BOOK_A_ROOM.scenario1/GREETING-L4/BOOK-L1/Line 08: assertion error - Line 08: Expected text(s) in response \"double\"\r\n########################################\r\nASSERTION FAILED in undefined - Expected: [\"double\"]  - Actual: {\"sender\":\"bot\",\"sourceData\":{\"request\":{\"messageText\":\"I want to book a single room.\",\"buttons\":null,\"media\":null},\"session\":{}},\"messageText\":\"You said: I want to book a single room.\",\"channel\":\"default\"}\r\nINPUT: I want to book a $type room.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: Good afternoon\r\n#bot: You said: Good afternoon\r\n#me: what can i do for you?\r\n#bot: You said: what can i do for you?\r\n#me: Today is 4/13/2023\r\n#bot: You said: Today is 4/13/2023\r\n#me: I want to book a single room.\r\n#bot: You said: I want to book a single room.\n    at wrapBotiumError (/usr/local/lib/node_modules/botium-cli/src/run/index.js:76:12)\n    at finish (/usr/local/lib/node_modules/botium-cli/src/run/index.js:205:24)\n    at /usr/local/lib/node_modules/botium-cli/src/run/index.js:218:11",
                "diff": null
              },
              "uuid": "3a69cb4a-ef5d-40cd-954d-30396b79ceae",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BOOK_A_ROOM.scenario1/GREETING-L5/BOOK-L1",
              "fullTitle": "Botium Test-Suite BOOK_A_ROOM.scenario1/GREETING-L5/BOOK-L1",
              "timedOut": false,
              "duration": 508,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Good evening\\n#bot: You said: Good evening\\n#me: what can i do for you?\\n#bot: You said: what can i do for you?\\n#me: Today is 4/13/2023\\n#bot: You said: Today is 4/13/2023\\n#me: I want to book a single room.\\n#bot: You said: I want to book a single room.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: BOOK_A_ROOM.scenario1/GREETING-L5/BOOK-L1/Line 08: assertion error - Line 08: Expected text(s) in response \"double\"\r\n########################################\r\nASSERTION FAILED in undefined - Expected: [\"double\"]  - Actual: {\"sender\":\"bot\",\"sourceData\":{\"request\":{\"messageText\":\"I want to book a single room.\",\"buttons\":null,\"media\":null},\"session\":{}},\"messageText\":\"You said: I want to book a single room.\",\"channel\":\"default\"}\r\nINPUT: I want to book a $type room.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: Good evening\r\n#bot: You said: Good evening\r\n#me: what can i do for you?\r\n#bot: You said: what can i do for you?\r\n#me: Today is 4/13/2023\r\n#bot: You said: Today is 4/13/2023\r\n#me: I want to book a single room.\r\n#bot: You said: I want to book a single room.",
                "estack": "Error: BOOK_A_ROOM.scenario1/GREETING-L5/BOOK-L1/Line 08: assertion error - Line 08: Expected text(s) in response \"double\"\r\n########################################\r\nASSERTION FAILED in undefined - Expected: [\"double\"]  - Actual: {\"sender\":\"bot\",\"sourceData\":{\"request\":{\"messageText\":\"I want to book a single room.\",\"buttons\":null,\"media\":null},\"session\":{}},\"messageText\":\"You said: I want to book a single room.\",\"channel\":\"default\"}\r\nINPUT: I want to book a $type room.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: Good evening\r\n#bot: You said: Good evening\r\n#me: what can i do for you?\r\n#bot: You said: what can i do for you?\r\n#me: Today is 4/13/2023\r\n#bot: You said: Today is 4/13/2023\r\n#me: I want to book a single room.\r\n#bot: You said: I want to book a single room.\n    at wrapBotiumError (/usr/local/lib/node_modules/botium-cli/src/run/index.js:76:12)\n    at finish (/usr/local/lib/node_modules/botium-cli/src/run/index.js:205:24)\n    at /usr/local/lib/node_modules/botium-cli/src/run/index.js:218:11",
                "diff": null
              },
              "uuid": "21fe356a-7375-405f-bef6-afeecf701c2a",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BOOK_A_ROOM.scenario1/GREETING-L6/BOOK-L1",
              "fullTitle": "Botium Test-Suite BOOK_A_ROOM.scenario1/GREETING-L6/BOOK-L1",
              "timedOut": false,
              "duration": 508,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: You said: hi\\n#me: what can i do for you?\\n#bot: You said: what can i do for you?\\n#me: Today is 4/13/2023\\n#bot: You said: Today is 4/13/2023\\n#me: I want to book a single room.\\n#bot: You said: I want to book a single room.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: BOOK_A_ROOM.scenario1/GREETING-L6/BOOK-L1/Line 08: assertion error - Line 08: Expected text(s) in response \"double\"\r\n########################################\r\nASSERTION FAILED in undefined - Expected: [\"double\"]  - Actual: {\"sender\":\"bot\",\"sourceData\":{\"request\":{\"messageText\":\"I want to book a single room.\",\"buttons\":null,\"media\":null},\"session\":{}},\"messageText\":\"You said: I want to book a single room.\",\"channel\":\"default\"}\r\nINPUT: I want to book a $type room.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: You said: hi\r\n#me: what can i do for you?\r\n#bot: You said: what can i do for you?\r\n#me: Today is 4/13/2023\r\n#bot: You said: Today is 4/13/2023\r\n#me: I want to book a single room.\r\n#bot: You said: I want to book a single room.",
                "estack": "Error: BOOK_A_ROOM.scenario1/GREETING-L6/BOOK-L1/Line 08: assertion error - Line 08: Expected text(s) in response \"double\"\r\n########################################\r\nASSERTION FAILED in undefined - Expected: [\"double\"]  - Actual: {\"sender\":\"bot\",\"sourceData\":{\"request\":{\"messageText\":\"I want to book a single room.\",\"buttons\":null,\"media\":null},\"session\":{}},\"messageText\":\"You said: I want to book a single room.\",\"channel\":\"default\"}\r\nINPUT: I want to book a $type room.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hi\r\n#bot: You said: hi\r\n#me: what can i do for you?\r\n#bot: You said: what can i do for you?\r\n#me: Today is 4/13/2023\r\n#bot: You said: Today is 4/13/2023\r\n#me: I want to book a single room.\r\n#bot: You said: I want to book a single room.\n    at wrapBotiumError (/usr/local/lib/node_modules/botium-cli/src/run/index.js:76:12)\n    at finish (/usr/local/lib/node_modules/botium-cli/src/run/index.js:205:24)\n    at /usr/local/lib/node_modules/botium-cli/src/run/index.js:218:11",
                "diff": null
              },
              "uuid": "181db888-afb4-4246-845e-f2fa782a92a4",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BOOK_A_ROOM.scenario1/GREETING-L7/BOOK-L1",
              "fullTitle": "Botium Test-Suite BOOK_A_ROOM.scenario1/GREETING-L7/BOOK-L1",
              "timedOut": false,
              "duration": 506,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello!\\n#bot: You said: hello!\\n#me: what can i do for you?\\n#bot: You said: what can i do for you?\\n#me: Today is 4/13/2023\\n#bot: You said: Today is 4/13/2023\\n#me: I want to book a single room.\\n#bot: You said: I want to book a single room.\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {
                "message": "Error: BOOK_A_ROOM.scenario1/GREETING-L7/BOOK-L1/Line 08: assertion error - Line 08: Expected text(s) in response \"double\"\r\n########################################\r\nASSERTION FAILED in undefined - Expected: [\"double\"]  - Actual: {\"sender\":\"bot\",\"sourceData\":{\"request\":{\"messageText\":\"I want to book a single room.\",\"buttons\":null,\"media\":null},\"session\":{}},\"messageText\":\"You said: I want to book a single room.\",\"channel\":\"default\"}\r\nINPUT: I want to book a $type room.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello!\r\n#bot: You said: hello!\r\n#me: what can i do for you?\r\n#bot: You said: what can i do for you?\r\n#me: Today is 4/13/2023\r\n#bot: You said: Today is 4/13/2023\r\n#me: I want to book a single room.\r\n#bot: You said: I want to book a single room.",
                "estack": "Error: BOOK_A_ROOM.scenario1/GREETING-L7/BOOK-L1/Line 08: assertion error - Line 08: Expected text(s) in response \"double\"\r\n########################################\r\nASSERTION FAILED in undefined - Expected: [\"double\"]  - Actual: {\"sender\":\"bot\",\"sourceData\":{\"request\":{\"messageText\":\"I want to book a single room.\",\"buttons\":null,\"media\":null},\"session\":{}},\"messageText\":\"You said: I want to book a single room.\",\"channel\":\"default\"}\r\nINPUT: I want to book a $type room.\r\n------------ TRANSCRIPT ----------------------------\r\n#me: hello!\r\n#bot: You said: hello!\r\n#me: what can i do for you?\r\n#bot: You said: what can i do for you?\r\n#me: Today is 4/13/2023\r\n#bot: You said: Today is 4/13/2023\r\n#me: I want to book a single room.\r\n#bot: You said: I want to book a single room.\n    at wrapBotiumError (/usr/local/lib/node_modules/botium-cli/src/run/index.js:76:12)\n    at finish (/usr/local/lib/node_modules/botium-cli/src/run/index.js:205:24)\n    at /usr/local/lib/node_modules/botium-cli/src/run/index.js:218:11",
                "diff": null
              },
              "uuid": "69089abb-0f27-4a72-bdfd-caa4308767d0",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BOOK_A_ROOM.scenario2/GREETING-L1/BOOK-L1",
              "fullTitle": "Botium Test-Suite BOOK_A_ROOM.scenario2/GREETING-L1/BOOK-L1",
              "timedOut": false,
              "duration": 509,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Hello\\n#bot: You said: Hello\\n#me: what can i do for you?\\n#bot: You said: what can i do for you?\\n#me: Today is 4/13/2023\\n#bot: You said: Today is 4/13/2023\\n#me: I want to book a double room.\\n#bot: You said: I want to book a double room.\\n#me: thanks\\n#bot: You said: thanks\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "439d3f26-1967-433d-80b2-493fab5517e2",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BOOK_A_ROOM.scenario2/GREETING-L2/BOOK-L1",
              "fullTitle": "Botium Test-Suite BOOK_A_ROOM.scenario2/GREETING-L2/BOOK-L1",
              "timedOut": false,
              "duration": 508,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Hi\\n#bot: You said: Hi\\n#me: what can i do for you?\\n#bot: You said: what can i do for you?\\n#me: Today is 4/13/2023\\n#bot: You said: Today is 4/13/2023\\n#me: I want to book a double room.\\n#bot: You said: I want to book a double room.\\n#me: thanks\\n#bot: You said: thanks\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f96ac8ac-e3d6-497c-8582-5a15a374f662",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BOOK_A_ROOM.scenario2/GREETING-L3/BOOK-L1",
              "fullTitle": "Botium Test-Suite BOOK_A_ROOM.scenario2/GREETING-L3/BOOK-L1",
              "timedOut": false,
              "duration": 507,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Good morning\\n#bot: You said: Good morning\\n#me: what can i do for you?\\n#bot: You said: what can i do for you?\\n#me: Today is 4/13/2023\\n#bot: You said: Today is 4/13/2023\\n#me: I want to book a double room.\\n#bot: You said: I want to book a double room.\\n#me: thanks\\n#bot: You said: thanks\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "33668d80-e716-4026-ae8c-2ed986ea344e",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BOOK_A_ROOM.scenario2/GREETING-L4/BOOK-L1",
              "fullTitle": "Botium Test-Suite BOOK_A_ROOM.scenario2/GREETING-L4/BOOK-L1",
              "timedOut": false,
              "duration": 508,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Good afternoon\\n#bot: You said: Good afternoon\\n#me: what can i do for you?\\n#bot: You said: what can i do for you?\\n#me: Today is 4/13/2023\\n#bot: You said: Today is 4/13/2023\\n#me: I want to book a double room.\\n#bot: You said: I want to book a double room.\\n#me: thanks\\n#bot: You said: thanks\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6d673167-6274-4858-bbf2-79ce07d66c08",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BOOK_A_ROOM.scenario2/GREETING-L5/BOOK-L1",
              "fullTitle": "Botium Test-Suite BOOK_A_ROOM.scenario2/GREETING-L5/BOOK-L1",
              "timedOut": false,
              "duration": 509,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Good evening\\n#bot: You said: Good evening\\n#me: what can i do for you?\\n#bot: You said: what can i do for you?\\n#me: Today is 4/13/2023\\n#bot: You said: Today is 4/13/2023\\n#me: I want to book a double room.\\n#bot: You said: I want to book a double room.\\n#me: thanks\\n#bot: You said: thanks\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "92694542-4ba2-48ae-96c9-d6450779f95d",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BOOK_A_ROOM.scenario2/GREETING-L6/BOOK-L1",
              "fullTitle": "Botium Test-Suite BOOK_A_ROOM.scenario2/GREETING-L6/BOOK-L1",
              "timedOut": false,
              "duration": 506,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: You said: hi\\n#me: what can i do for you?\\n#bot: You said: what can i do for you?\\n#me: Today is 4/13/2023\\n#bot: You said: Today is 4/13/2023\\n#me: I want to book a double room.\\n#bot: You said: I want to book a double room.\\n#me: thanks\\n#bot: You said: thanks\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "9ded0e90-bf22-4e59-ae40-9dc2c78e7a8c",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BOOK_A_ROOM.scenario2/GREETING-L7/BOOK-L1",
              "fullTitle": "Botium Test-Suite BOOK_A_ROOM.scenario2/GREETING-L7/BOOK-L1",
              "timedOut": false,
              "duration": 508,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello!\\n#bot: You said: hello!\\n#me: what can i do for you?\\n#bot: You said: what can i do for you?\\n#me: Today is 4/13/2023\\n#bot: You said: Today is 4/13/2023\\n#me: I want to book a double room.\\n#bot: You said: I want to book a double room.\\n#me: thanks\\n#bot: You said: thanks\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "f8503095-5e72-4e6c-9848-d717ddf97d8e",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BUY_AN_ITEM.Case1/GREETING-L1",
              "fullTitle": "Botium Test-Suite BUY_AN_ITEM.Case1/GREETING-L1",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Hello\\n#bot: You said: Hello\\n#me: What can I do for you?\\n#bot: You said: What can I do for you?\\n#me: I want to buy a cake.\\n#bot: You said: I want to buy a cake.\\n#me: How much is it ?\\n#bot: You said: How much is it ?\\n#me: It is 10\\n#bot: You said: It is 10\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "654a7ccf-f57e-42c8-96ac-657de23add31",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BUY_AN_ITEM.Case1/GREETING-L2",
              "fullTitle": "Botium Test-Suite BUY_AN_ITEM.Case1/GREETING-L2",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Hi\\n#bot: You said: Hi\\n#me: What can I do for you?\\n#bot: You said: What can I do for you?\\n#me: I want to buy a cake.\\n#bot: You said: I want to buy a cake.\\n#me: How much is it ?\\n#bot: You said: How much is it ?\\n#me: It is 10\\n#bot: You said: It is 10\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "33327e39-964b-44c3-ba80-10e8fbfa75b3",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BUY_AN_ITEM.Case1/GREETING-L3",
              "fullTitle": "Botium Test-Suite BUY_AN_ITEM.Case1/GREETING-L3",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Good morning\\n#bot: You said: Good morning\\n#me: What can I do for you?\\n#bot: You said: What can I do for you?\\n#me: I want to buy a cake.\\n#bot: You said: I want to buy a cake.\\n#me: How much is it ?\\n#bot: You said: How much is it ?\\n#me: It is 10\\n#bot: You said: It is 10\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "cddea57d-6272-4cb5-b245-54e5765912d4",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BUY_AN_ITEM.Case1/GREETING-L4",
              "fullTitle": "Botium Test-Suite BUY_AN_ITEM.Case1/GREETING-L4",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Good afternoon\\n#bot: You said: Good afternoon\\n#me: What can I do for you?\\n#bot: You said: What can I do for you?\\n#me: I want to buy a cake.\\n#bot: You said: I want to buy a cake.\\n#me: How much is it ?\\n#bot: You said: How much is it ?\\n#me: It is 10\\n#bot: You said: It is 10\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "80e44594-54df-45dd-8df5-57e887518068",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BUY_AN_ITEM.Case1/GREETING-L5",
              "fullTitle": "Botium Test-Suite BUY_AN_ITEM.Case1/GREETING-L5",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Good evening\\n#bot: You said: Good evening\\n#me: What can I do for you?\\n#bot: You said: What can I do for you?\\n#me: I want to buy a cake.\\n#bot: You said: I want to buy a cake.\\n#me: How much is it ?\\n#bot: You said: How much is it ?\\n#me: It is 10\\n#bot: You said: It is 10\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "72eb5247-b662-4f19-9cc8-3499f0cd32e0",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BUY_AN_ITEM.Case1/GREETING-L6",
              "fullTitle": "Botium Test-Suite BUY_AN_ITEM.Case1/GREETING-L6",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: You said: hi\\n#me: What can I do for you?\\n#bot: You said: What can I do for you?\\n#me: I want to buy a cake.\\n#bot: You said: I want to buy a cake.\\n#me: How much is it ?\\n#bot: You said: How much is it ?\\n#me: It is 10\\n#bot: You said: It is 10\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "6399df3c-0595-4961-9b97-c53642ddf580",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BUY_AN_ITEM.Case1/GREETING-L7",
              "fullTitle": "Botium Test-Suite BUY_AN_ITEM.Case1/GREETING-L7",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello!\\n#bot: You said: hello!\\n#me: What can I do for you?\\n#bot: You said: What can I do for you?\\n#me: I want to buy a cake.\\n#bot: You said: I want to buy a cake.\\n#me: How much is it ?\\n#bot: You said: How much is it ?\\n#me: It is 10\\n#bot: You said: It is 10\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "538bf3cb-d7d7-482f-8386-dfe0d3a7ec98",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BUY_AN_ITEM.Case2/GREETING-L1",
              "fullTitle": "Botium Test-Suite BUY_AN_ITEM.Case2/GREETING-L1",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Hello\\n#bot: You said: Hello\\n#me: What can I do for you?\\n#bot: You said: What can I do for you?\\n#me: I want to buy a code.\\n#bot: You said: I want to buy a code.\\n#me: How much is it ?\\n#bot: You said: How much is it ?\\n#me: It is 5\\n#bot: You said: It is 5\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "4a9c27fe-d9ca-4d6c-bf7a-f6e56b570024",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BUY_AN_ITEM.Case2/GREETING-L2",
              "fullTitle": "Botium Test-Suite BUY_AN_ITEM.Case2/GREETING-L2",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Hi\\n#bot: You said: Hi\\n#me: What can I do for you?\\n#bot: You said: What can I do for you?\\n#me: I want to buy a code.\\n#bot: You said: I want to buy a code.\\n#me: How much is it ?\\n#bot: You said: How much is it ?\\n#me: It is 5\\n#bot: You said: It is 5\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "ff6fb749-06b0-46c6-a2d9-8832e6dc05ba",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BUY_AN_ITEM.Case2/GREETING-L3",
              "fullTitle": "Botium Test-Suite BUY_AN_ITEM.Case2/GREETING-L3",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Good morning\\n#bot: You said: Good morning\\n#me: What can I do for you?\\n#bot: You said: What can I do for you?\\n#me: I want to buy a code.\\n#bot: You said: I want to buy a code.\\n#me: How much is it ?\\n#bot: You said: How much is it ?\\n#me: It is 5\\n#bot: You said: It is 5\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "3aa2856b-ed9b-4621-95a0-a403b755edd3",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BUY_AN_ITEM.Case2/GREETING-L4",
              "fullTitle": "Botium Test-Suite BUY_AN_ITEM.Case2/GREETING-L4",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Good afternoon\\n#bot: You said: Good afternoon\\n#me: What can I do for you?\\n#bot: You said: What can I do for you?\\n#me: I want to buy a code.\\n#bot: You said: I want to buy a code.\\n#me: How much is it ?\\n#bot: You said: How much is it ?\\n#me: It is 5\\n#bot: You said: It is 5\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "412b1ff9-edce-4945-ac8b-8c63e922476c",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BUY_AN_ITEM.Case2/GREETING-L5",
              "fullTitle": "Botium Test-Suite BUY_AN_ITEM.Case2/GREETING-L5",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Good evening\\n#bot: You said: Good evening\\n#me: What can I do for you?\\n#bot: You said: What can I do for you?\\n#me: I want to buy a code.\\n#bot: You said: I want to buy a code.\\n#me: How much is it ?\\n#bot: You said: How much is it ?\\n#me: It is 5\\n#bot: You said: It is 5\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "35a8afe8-5961-436f-a70b-a7ddad928b18",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BUY_AN_ITEM.Case2/GREETING-L6",
              "fullTitle": "Botium Test-Suite BUY_AN_ITEM.Case2/GREETING-L6",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hi\\n#bot: You said: hi\\n#me: What can I do for you?\\n#bot: You said: What can I do for you?\\n#me: I want to buy a code.\\n#bot: You said: I want to buy a code.\\n#me: How much is it ?\\n#bot: You said: How much is it ?\\n#me: It is 5\\n#bot: You said: It is 5\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "bbd28cfd-ea89-4a83-9313-eeebcd05b5d5",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "BUY_AN_ITEM.Case2/GREETING-L7",
              "fullTitle": "Botium Test-Suite BUY_AN_ITEM.Case2/GREETING-L7",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: hello!\\n#bot: You said: hello!\\n#me: What can I do for you?\\n#bot: You said: What can I do for you?\\n#me: I want to buy a code.\\n#bot: You said: I want to buy a code.\\n#me: How much is it ?\\n#bot: You said: How much is it ?\\n#me: It is 5\\n#bot: You said: It is 5\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "b47a8a96-6f90-4659-9185-b2aef7d0d620",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update",
              "fullTitle": "Botium Test-Suite Update",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: The previous price is 300\\n#bot: You said: The previous price is 300\\n#me: The current price is 330\\n#bot: You said: The current price is 330\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "2de252f9-23cc-406d-a940-9196c2213f48",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "goodbye",
              "fullTitle": "Botium Test-Suite goodbye",
              "timedOut": false,
              "duration": 503,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: goodbye!\\n#bot: You said: goodbye!\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "26068e5a-004b-4aba-92e7-fc99a4d2a7e9",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "shortconvos",
              "fullTitle": "Botium Test-Suite shortconvos",
              "timedOut": false,
              "duration": 3009,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": "{\n  \"title\": \"Conversation Log\",\n  \"value\": \"#me: Hello\\n#bot: You said: Hello\\n#me: My ID number is id_123456\\n#bot: You said: My ID number is id_123456\\n#me: What is the weather like today?\\n#bot: You said: What is the weather like today?\\n#me: It's rainy and a little windy.\\n#bot: You said: It's rainy and a little windy.\\n#me: Bye bye\\n#bot: You said: Bye bye\"\n}",
              "code": "debug('running testcase ' + convo.header.name)\nconst attachmentsLog = []\nconst listenerMe = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerBot = (container, msg) => {\n  if (msg.attachments) attachmentsLog.push(...msg.attachments)\n}\nconst listenerAttachments = (container, attachment) => {\n  attachmentsLog.push(attachment)\n}\ndriver.on('MESSAGE_SENTTOBOT', listenerMe)\ndriver.on('MESSAGE_RECEIVEDFROMBOT', listenerBot)\ndriver.on('MESSAGE_ATTACHMENT', listenerAttachments)\nconst finish = (transcript, err) => {\n  if (transcript) {\n    addContext(runner, { title: 'Conversation Log', value: transcript.prettifyActual() })\n  }\n  driver.eventEmitter.removeListener('MESSAGE_SENTTOBOT', listenerMe)\n  driver.eventEmitter.removeListener('MESSAGE_RECEIVEDFROMBOT', listenerBot)\n  driver.eventEmitter.removeListener('MESSAGE_ATTACHMENT', listenerAttachments)\n  if (argv.attachments && attachmentsLog.length > 0) {\n    debug(`Found ${attachmentsLog.length} attachments, saving to folder ${argv.attachments}`)\n    attachmentsLog.forEach((a, i) => {\n      const filename = slug(convo.header.name) + '_' + i + (a.name ? '_' + slug(a.name) : '') + (a.mimeType ? '.' + mime.extension(a.mimeType) : '')\n      const outputTo = path.join(argv.attachments, filename)\n      try {\n        fs.writeFileSync(outputTo, Buffer.from(a.base64, 'base64'))\n      } catch (err) {\n        debug(`Failed to write attachment to ${outputTo}: ${err.message || util.inspect(err)}`)\n      }\n    })\n  }\n  if (err) {\n    testcaseDone(wrapBotiumError(err))\n  } else {\n    testcaseDone()\n  }\n}\nconvo.Run(suite.container)\n  .then((transcript) => {\n    debug(convo.header.name + ' ready, calling done function.')\n    finish(transcript)\n  })\n  .catch((err) => {\n    debug(convo.header.name + ' failed: ' + util.inspect(err))\n    finish(err.transcript, err)\n  })",
              "err": {},
              "uuid": "13f8b01d-cc29-4de7-9176-c167853316e9",
              "parentUUID": "ed5ae32b-262e-4623-a22e-14962c6ce7af",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "439d3f26-1967-433d-80b2-493fab5517e2",
            "f96ac8ac-e3d6-497c-8582-5a15a374f662",
            "33668d80-e716-4026-ae8c-2ed986ea344e",
            "6d673167-6274-4858-bbf2-79ce07d66c08",
            "92694542-4ba2-48ae-96c9-d6450779f95d",
            "9ded0e90-bf22-4e59-ae40-9dc2c78e7a8c",
            "f8503095-5e72-4e6c-9848-d717ddf97d8e",
            "654a7ccf-f57e-42c8-96ac-657de23add31",
            "33327e39-964b-44c3-ba80-10e8fbfa75b3",
            "cddea57d-6272-4cb5-b245-54e5765912d4",
            "80e44594-54df-45dd-8df5-57e887518068",
            "72eb5247-b662-4f19-9cc8-3499f0cd32e0",
            "6399df3c-0595-4961-9b97-c53642ddf580",
            "538bf3cb-d7d7-482f-8386-dfe0d3a7ec98",
            "4a9c27fe-d9ca-4d6c-bf7a-f6e56b570024",
            "ff6fb749-06b0-46c6-a2d9-8832e6dc05ba",
            "3aa2856b-ed9b-4621-95a0-a403b755edd3",
            "412b1ff9-edce-4945-ac8b-8c63e922476c",
            "35a8afe8-5961-436f-a70b-a7ddad928b18",
            "bbd28cfd-ea89-4a83-9313-eeebcd05b5d5",
            "b47a8a96-6f90-4659-9185-b2aef7d0d620",
            "2de252f9-23cc-406d-a940-9196c2213f48",
            "26068e5a-004b-4aba-92e7-fc99a4d2a7e9",
            "13f8b01d-cc29-4de7-9176-c167853316e9"
          ],
          "failures": [
            "89103704-9eac-4b7d-bc7c-3f78ba6d9fff",
            "2c847b8f-1876-4a15-9c12-727c7e1876bd",
            "dbd5aa74-33e5-4fb6-bad9-2a69aafc0ce7",
            "3a69cb4a-ef5d-40cd-954d-30396b79ceae",
            "21fe356a-7375-405f-bef6-afeecf701c2a",
            "181db888-afb4-4246-845e-f2fa782a92a4",
            "69089abb-0f27-4a72-bdfd-caa4308767d0"
          ],
          "pending": [],
          "skipped": [],
          "duration": 10746,
          "root": false,
          "rootEmpty": false,
          "_timeout": 60000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}